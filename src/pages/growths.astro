---
import BaseLayout from '../layouts/BaseLayout.astro';
import classGrowthsText from '../../data/class-growths.csv';

const classGrowths = new Map(classGrowthsText.split(/\r?\n/).slice(1, -1).map(line => {
  const parts = line.split('|');
  const name = parts[parts.length - 1];
  const growths = parts.slice(1, -1).map(n => ({
    text: n,
    number: Math.round(parseFloat(n) * 10),
    color: 0,
  }));
  const sum = (growths.slice(2, -1).reduce((s, x) => s + x.number, 0)
    + (growths[0].number + growths[1].number) / 10
    + growths[growths.length - 1].number * 4.1) / 10;
  growths.push({
    text: sum.toFixed(2),
    number: sum,
    color: 0,
  });
  return [parseInt(parts[0], 16), { name, growths }];
}));
classGrowths.delete(0x0c);  // 盗贼

const ids = Array.from(Array(100).keys());
const groups = [
  [...ids.slice(0x01, 0x0c), ...ids.slice(0x0d, 0x13), ...ids.slice(0x33, 0x40), 0x46, ...ids.slice(0x13, 0x17)],
  [...ids.slice(0x1b, 0x2c)],
];
const grwothLength = classGrowths.get(1)!.growths.length;
for (const group of groups) {
  for (let grwothIndex = 0; grwothIndex < grwothLength; grwothIndex++) {
    const growthSet = new Set<number>();
    let max = -Infinity;
    let min = Infinity;
    for (const id of group) {
      const { number } = classGrowths.get(id)!.growths[grwothIndex];
      growthSet.add(number);
      if (number > max) max = number;
      if (number < min) min = number;
    }
    const delta = max - min;
    for (const id of group) {
      const growth = classGrowths.get(id)!.growths[grwothIndex];
      const ratio = (growth.number - min) / delta;
      if (ratio > 0.9) {
        growth.color = growthSet.size > 3 ? 5 : 4;
      } else if (ratio < 0.1) {
        growth.color = growthSet.size > 3 ? 1 : 2;
      } else if (ratio > 0.7) {
        growth.color = 4;
      } else if (ratio < 0.3) {
        growth.color = 2;
      } else {
        growth.color = 3;
      }
    }

  }
}

const title = '成长率';
---

<BaseLayout title={title}>
  <div id="grid-main">
    <h1>{title}</h1>
    <p>
      升级时，每项属性提升：此属性的兵种成长率 + 此属性的种族成长率 + 兵种随机成长率，小数点部分会被保留。<br />
      随机成长率：在【0.0、0.1、0.2、...、随机上限】中随机抽取一个，抽到上下限的概率低于其他。
    </p>
    <h2 class="growths-title">
      兵种成长率
      <div class="growths-tip">* 随机部分按期望计入，HP、MP按十分之一计入</div>
    </h2>
    <table class="growths-table">
      <thead>
        <tr>
          <th>兵种</th>
          <th>HP</th>
          <th>MP</th>
          <th>STR</th>
          <th>VIT</th>
          <th>DEX</th>
          <th>AGI</th>
          <th>AVD</th>
          <th>INT</th>
          <th>MND</th>
          <th>RES</th>
          <th>随机上限</th>
          <th>总和*</th>
        </tr>
      </thead>
      <tbody>
        {groups.map(group => (
          <>
            {group.map(id => {
              const { name, growths } = classGrowths.get(id)!;
              return(
                <tr class={`growths-class-${id.toString(16)}`}>
                  <td>{name}</td>
                  {growths.map(({ text, color })=> (
                    <td class={`growths-color-${color}`}>{text}</td>
                  ))}
                </tr>
              );
            })}
          </>
        ))}
      </tbody>
    </table>
    <h2 class="growths-title">
      种族成长率
    </h2>
    <p>《重生》中全部种族（包括剧情角色）的成长率均为HP、MP0.2，其他属性0.1，成长性不存在个体差距。</p>
  </div>
</BaseLayout>

<style lang="scss" is:global>
  #grid-main {
    grid-column: 2 / 4;
    margin-bottom: 6rem;
    > h1 + p {
      margin-top: 2.5rem;
    }
  }
  .growths-title {
    position: relative;
  }
  .growths-tip {
    position: absolute;
    right: 0;
    bottom: -1rem;
    max-width: 75%;
    font-size: .875rem;
    font-weight: normal;
    line-height: 1.125rem;
    text-align: right;
    color: var(--theme-text-lighter);
  }
  .growths-table {
    font-size: 10pt;
    border: 1px rgba(0,0,0,0.22) solid;
    border-width: 2px 0 0 2px;
    tbody {
      color: var(--theme-text-light);
      tr {
        background: none;
        &:hover {
          color: #000;
          text-shadow: #111 0 0 1px;
          :root.theme-dark & td:first-child {
            color: #fff;
            text-shadow: #eee 0 0 1px;
          }
        }
      }
    }
    th, td {
      width: 7%;
      padding: 2px 3px 2px 3px;
      text-align: center;
      border: 1px rgba(0,0,0,0.15) solid;
      border-width: 0 1px 1px 0;
      &:first-child {
        width: auto;
        text-align: right;
        padding-right: .75rem;
      }
      &:first-child,
      &:nth-child(3),
      &:nth-child(5),
      &:nth-child(8),
      &:nth-child(11),
      &:nth-child(12),
      &:last-child {
        border-right-width: 2px;
        border-right-color: rgba(0,0,0,0.22);
      }
    }
    tr:last-child {
      th, td {
        border-bottom-width: 2px;
        border-bottom-color: rgba(0,0,0,0.22);
      }
    }
    td {
      line-height: 17px;
    }
  }
  .growths-class-12,
  .growths-class-46,
  .growths-class-15,
  .growths-class-16,
  .growths-class-22,
  .growths-class-23,
  .growths-class-27, {
    td {
      border-bottom-width: 2px;
      border-bottom-color: rgba(0,0,0,0.22);
    }
  }
  .growths-class-16 {
    td {
      border-bottom-color: rgba(0,0,0,0.6);
    }
  }
  .growths-color-1 {
    color: #111;
    background-color: rgb(230 124 115);
  }
  .growths-color-2 {
    color: #111;
    background-color: rgb(243, 190, 185);
  }
  .growths-color-3 {
    color: #111;
    background-color: rgb(255, 255, 255);
  }
  .growths-color-4 {
    color: #111;
    background-color: rgb(171, 221, 197);
  }
  .growths-color-5 {
    color: #111;
    background-color: rgb(87, 187, 138);
  }
</style>
